#! /usr/bin/python
# -*- Mode: Python; indent-tabs-mode: nil; tab-width: 4; coding: utf-8 -*-
# bcnote
#
# Copyright Â© 2015 Gwendal Le Bihan
# 
# This file is part of BCNote.
# 
# BCNote is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# BCNote is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with BCNote.  If not, see <http://www.gnu.org/licenses/>.

import gettext
gettext.install("bcnote", "/usr/share/locale")

from BCNote.informations import *
from BCNote.main import Application
import optparse
import logging

if __name__ == "__main__":
    optparser = optparse.OptionParser()
    optparser.add_option('--dev-token', dest = "dev_token", help = _("Specify dev token (dev)"))
    optparser.add_option('--db-upgrades-path', dest = "db_upgrades_path", default = "/usr/share/%s/db_upgrades" % UNIX_APPNAME, help = _("Set path to the folder where the DB upgrade files are located (dev)"))
    optparser.add_option('-d', '--debug-level', dest = "debug_level", default = 1, help = _("Set debug level"), type = int)
    options, args = optparser.parse_args()
    
    if options.debug_level > 4:
        options.debug_level = 4
    if options.debug_level < 0:
        options.debug_level = 0
    
    if options.debug_level == 4:
        logging.getLogger().setLevel(logging.DEBUG)
    elif options.debug_level == 3:
        logging.getLogger().setLevel(logging.INFO)
    elif options.debug_level == 2:
        logging.getLogger().setLevel(logging.WARNING)
    elif options.debug_level == 1:
        logging.getLogger().setLevel(logging.ERROR)
    elif options.debug_level == 0:
        logging.getLogger().setLevel(logging.CRITICAL)
        
    Application(options).run()
